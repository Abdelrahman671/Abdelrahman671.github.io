[ { "title": "Squirrel", "url": "/posts/Squirrel/", "categories": "CyberTalents Writeup", "tags": "Writeup, DFIR", "date": "2022-10-06 17:50:00 +0200", "snippet": "Step 1:After downloading the zip file and extracting it. we will find an image jpg file.By passing the image file to strings command strings squirrel.jpg | less, we will observe a link to download another file.Step 2:After downloading the zip file, we will find that it is protected by a password.So let’s use zip2john tool and see if we are able to crack the password or not.Getting hash of zip file :Running rockyou.txt wordlist to crack the password hashSince I have cracked this hash before so let’s use the --show option to display the password.Zip file password : squirrel07Step 3:Passing EVIL file to file command, we will observe that it can’t recognize the type of it’s data.So I decided to check the hexdump of this file in order to check the magic bytes of it.using this command : xxd -g 1 EVIL | lessWe will find that the first 4 bytes are corrupted according to the JFIF file signature.Modifying these bytes by any hexeditor tool, I have used ghex then changed the file extension to EVIL.jfif.Step 4:Opening the image file after we have modified the corrupted bytes and changed its extension, we will see a text in top-right corner.Copying this text and using CyberChef, It will detect that it is a base32 encoding text.Decoding the text from base32 and we will find the flag : flag{Ev1l_S9uirr3lz}" }, { "title": "Hidden In Plain", "url": "/posts/Hidden-In-Plain/", "categories": "CyberTalents Writeup", "tags": "Network Security, DFIR", "date": "2022-09-23 01:30:00 +0200", "snippet": "Step 1:After downloading the zip file and extracting it. we will find three pcap files and analysing them by using wireshark tool.First thing, let’s check what procotols do they have via Statistics &gt; Protocol HierarchyStep 2:Now, we can proceed with our analysis. Looking at the packets and we only observe the interesting thing is about the ICMP data.Step 3:It’s the time to extract the icmp data from the packets using tshark or pyshark tools.I have written a small script using pyshark to extract the icmp data.import pysharkimport sys# stores pcap filenamefilename = sys.argv[1]# open pcap filefile = pyshark.FileCapture(filename)# loop over each packetfor pkt in file: # fetch icmp data from packet as \"57:00:...\" cap = pkt.icmp.data_data # insert the fetched data into a list data_list = cap.split(\":\") # storing the offset bytes in one string after converting it from hex to char offset = \"\" for i in data_list: offset += chr(int(i, 0x10)) print(offset) After running the script, we will see the icmp data combined with strange symbols.Step 4:There was nothing clear after extracting the icmp data. I stopped at this point then contacted the technical team for providing any hints for the challenge.Hint: yEnc Encrypted and the flag format is a hashI have searched for how it works and how to use it in python. Actually, I have found a yEnc module for python and it supports the encoding/decoding directly to files or memory buffers.At this time, I have modified the script in order to implement the decode operation on the extracted icmp data to see what will be the results.import pysharkimport sysimport yenc# stores pcap filenamefilename = sys.argv[1]# open pcap filefile = pyshark.FileCapture(filename)# loop over each packetfor pkt in file: # fetch icmp data from packet as \"57:00:...\" cap = pkt.icmp.data_data # insert the fetched data into a list data_list = cap.split(\":\") # storing the offset bytes in one string after converting it from hex to char offset = \"\" for i in data_list: offset += chr(int(i, 0x10)) # storing the encoding yenc icmp data into an input file inputFile = sys.argv[2] with open(inputFile, \"a\", encoding=\"latin-1\") as f: f.write(offset) # decoding yenc icmp data to an output file outputFile = sys.argv[3] yenc.decode(inputFile, outputFile)Step 5:Executing the script by giving it the following arguments: pcap file name input file to store the yenc encoded data output file to decode the yenc encoded dataWhen running the script on the first pcap file f101.pcap, I found something that might be interested from the decode operation.Step 6I have copied and inserted this data on CyberChef then found that this is a base64 encoding, after decoding it we observe the output result.We still need to perform another operation in order to get the flag. So let’s get the md5 hash of the “flag” word.finally! the flag is : flag{327a6c4304ad5938eaf0efb6cc3e53dc}" } ]
